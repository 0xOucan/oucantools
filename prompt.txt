
i want  avoid the idea of cloning or forking coinbase repo only using it as inspiration or reference, take my integration like a new kit and for succesfully use it in other agents or chatbots  as a package i will give you all the documentation for that 

this is the coinbase agent kit documentation


https://github.com/coinbase/agentkit/tree/master/typescript/agentkit/src

and this is the tree structure

├── CHANGELOG.md
├── jest.config.cjs
├── package.json
├── README.md
├── src
│   ├── action-providers
│   │   ├── actionDecorator.ts
│   │   ├── actionProvider.ts
│   │   ├── alchemy
│   │   │   ├── alchemyTokenPricesActionProvider.test.ts
│   │   │   ├── alchemyTokenPricesActionProvider.ts
│   │   │   ├── index.ts
│   │   │   ├── README.md
│   │   │   └── schemas.ts
│   │   ├── basename
│   │   │   ├── basenameActionProvider.test.ts
│   │   │   ├── basenameActionProvider.ts
│   │   │   ├── constants.ts
│   │   │   ├── index.ts
│   │   │   └── schemas.ts
│   │   ├── cdp
│   │   │   ├── cdpApiActionProvider.test.ts
│   │   │   ├── cdpApiActionProvider.ts
│   │   │   ├── cdpWalletActionProvider.test.ts
│   │   │   ├── cdpWalletActionProvider.ts
│   │   │   ├── constants.ts
│   │   │   ├── index.ts
│   │   │   ├── README.md
│   │   │   └── schemas.ts
│   │   ├── customActionProvider.ts
│   │   ├── erc20
│   │   │   ├── constants.ts
│   │   │   ├── erc20ActionProvider.test.ts
│   │   │   ├── erc20ActionProvider.ts
│   │   │   ├── index.ts
│   │   │   ├── README.md
│   │   │   └── schemas.ts
│   │   ├── erc721
│   │   │   ├── constants.ts
│   │   │   ├── erc721ActionProvider.test.ts
│   │   │   ├── erc721ActionProvider.ts
│   │   │   ├── index.ts
│   │   │   ├── README.md
│   │   │   └── schemas.ts
│   │   ├── farcaster
│   │   │   ├── farcasterActionProvider.test.ts
│   │   │   ├── farcasterActionProvider.ts
│   │   │   ├── index.ts
│   │   │   ├── README.md
│   │   │   └── schemas.ts
│   │   ├── index.ts
│   │   ├── morpho
│   │   │   ├── constants.ts
│   │   │   ├── index.ts
│   │   │   ├── morphoActionProvider.test.ts
│   │   │   ├── morphoActionProvider.ts
│   │   │   ├── README.md
│   │   │   └── schemas.ts
│   │   ├── pyth
│   │   │   ├── index.ts
│   │   │   ├── pythActionProvider.test.ts
│   │   │   ├── pythActionProvider.ts
│   │   │   ├── README.md
│   │   │   └── schemas.ts
│   │   ├── twitter
│   │   │   ├── index.ts
│   │   │   ├── README.md
│   │   │   ├── schemas.ts
│   │   │   ├── twitterActionProvider.test.ts
│   │   │   └── twitterActionProvider.ts
│   │   ├── wallet
│   │   │   ├── index.ts
│   │   │   ├── README.md
│   │   │   ├── schemas.ts
│   │   │   ├── walletActionProvider.test.ts
│   │   │   └── walletActionProvider.ts
│   │   ├── weth
│   │   │   ├── constants.ts
│   │   │   ├── index.ts
│   │   │   ├── schemas.ts
│   │   │   ├── wethActionProvider.test.ts
│   │   │   └── wethActionProvider.ts
│   │   └── wow
│   │       ├── constants.ts
│   │       ├── index.ts
│   │       ├── README.md
│   │       ├── schemas.ts
│   │       ├── uniswap
│   │       │   ├── constants.ts
│   │       │   └── utils.ts
│   │       ├── utils.ts
│   │       ├── wowActionProvider.test.ts
│   │       └── wowActionProvider.ts
│   ├── agentkit.ts
│   ├── analytics
│   │   ├── index.ts
│   │   └── sendAnalyticsEvent.ts
│   ├── index.ts
│   ├── network
│   │   ├── index.ts
│   │   ├── network.ts
│   │   └── types.ts
│   ├── utils.test.ts
│   ├── utils.ts
│   └── wallet-providers
│       ├── cdpWalletProvider.ts
│       ├── evmWalletProvider.ts
│       ├── index.ts
│       ├── viemWalletProvider.ts
│       └── walletProvider.ts
└── tsconfig.json

19 directories, 93 files








 (as i will use aavetest integration as actions it is already wrapped in a folder

tree
.
├── CHANGELOG.md
├── jest.config.cjs
├── package.json
├── README.md
├── src
│   ├── action providers
│   │   ├── aave-tools
│   │   │   ├── aaveprotocolActionProvider.test.ts
│   │   │   ├── aaveprotocolActionProvider.ts
│   │   │   ├── constants.ts
│   │   │   ├── errors.ts
│   │   │   ├── index.ts
│   │   │   ├── README.md
│   │   │   ├── schemas.ts
│   │   │   ├── types.ts
│   │   │   └── utils.ts
│   │   ├── actionDecorator.ts
│   │   ├── actionProvider.ts
│   │   ├── customActionProvider.ts
│   │   └── index.ts
│   ├── agentkit.ts
│   ├── analytics
│   │   ├── index.ts
│   │   └── sendAnalyticsEvent.ts
│   ├── index.ts
│   ├── network
│   │   ├── index.ts
│   │   ├── network.ts
│   │   └── types.ts
│   ├── utils.test.ts
│   ├── utils.ts
│   └── walet-providers
│       ├── cdpWalletProvider.ts
│       ├── evmWalletProvider.ts
│       ├── index.ts
│       ├── viemWalletProvider.ts
│       └── walletProvider.ts
└── tsconfig.json

7 directories, 32 files


 because is the begining of a library of actions for agents

@https://docs.cdp.coinbase.com/agentkit/docs/add-agent-capabilities 

Add Agent Capabilities
We highly encourage extending the agent's functionality through new onchain interactions and APIs, or by introducing new Langchain tools.

Any function that can be written in Python or TypeScript can be made a command for an agent.

Add existing Langchain tools
You can easily extend your agent's capabilities by incorporating additional Langchain tools. See Integrating LangChain Tools.

Add Custom functionality (using AI or manually)
To make the process as simple as possible, AgentKit supports adding custom functionality in multiple ways. Below are examples of how to add message signing functionality:

Adding Actions to your Action Provider
Simple Option within your chatbot.ts file
For quick testing or actions you don't plan to contribute to the repo, you can use the customActionProvider helper.

const customSignMessage = customActionProvider<EvmWalletProvider>({ // wallet types specify which providers can use this action. It can be as generic as WalletProvider or as specific as CdpWalletProvider
  name: "sign_message",
  description: "Sign arbitrary messages using EIP-191 Signed Message Standard hashing",
  schema: z.object({
    message: z.string().describe("The message to sign"),
  }),
  invoke: async (walletProvider, args: any) => {
    const { message } = args;
    const signature = await walletProvider.signMessage(message);
    return `The payload signature ${signature}`;
  },
});

const agentKit = await AgentKit.from({
  walletProvider,
  actionProviders: [customSignMessage],
});

Adding Actions for contribution
Actions are defined as instance methods on the action provider class with the @CreateAction decorator. Actions can use a wallet provider or not and always return a Promise that resolves to a string.

See the contribution guide for more details.

Hint: Use LLMs to generate the schema and action provider, so all you need to define is the function.

Define the action schema. Action schemas are defined using the zod library.
import { z } from "zod";

export const SignMessageSchema = z.object({
  message: z.string().describe("The message to sign. e.g. `hello world`"),
});

Define the action provider.
import { ActionProvider, WalletProvider, Network, CreateAction } from "@coinbase/agentkit";

class MyActionProvider extends ActionProvider<WalletProvider> {
    constructor() {
        super("my-action-provider", []);
    }

    @CreateAction({
        name: "my-action",
        description: "My action description",
        schema: MyActionSchema,
    })
    async myAction(args: z.infer<typeof MyActionSchema>): Promise<string> {
        return args.myField;
    }

    supportsNetwork = (network: Network) => true;
}

export const myActionProvider = () => new MyActionProvider();

Add the action provider to your AgentKit instance:
const agentKit = new AgentKit({
  cdpApiKeyName: "CDP API KEY NAME",
  cdpApiKeyPrivate: "CDP API KEY PRIVATE KEY",
  actionProviders: [myActionProvider()],
});

Contribute to the toolkit
If you go through the additional effort to formally add CDP SDK functionality in a way that's compatible with the package, please submit a PR so we can consider including it in future releases!

more agentkit references:
dont take the template as reference

@https://docs.cdp.coinbase.com/agentkit/docs/quickstart 

Starting from scratch with Langchain
For developers who want more control over their agent implementation, you can start from scratch using Langchain integration.

Prerequisites
Node.js 18+
npm 9.7.2+
CDP API Key
API keys to the LLM of your choice (we recommend OpenAI)
A fresh directory
Installation
To use the CDP AgentKit Toolkit with LangChain, first install the required packages:

npm install @coinbase/agentkit @coinbase/cdp-langchain @langchain/openai @langchain/core viem

Environment Setup
Set the required environment variables:

# CDP API credentials
export CDP_API_KEY_NAME="your-cdp-key-name"
export CDP_API_KEY_PRIVATE_KEY="your-cdp-private-key"

# LLM API key (we'll use OpenAI for this guide)
export OPENAI_API_KEY="your-openai-key"

# Optional configurations
export NETWORK_ID="base-sepolia"  # Optional, defaults to base-sepolia

Create a .env file in your project root with these variables:

CDP_API_KEY_NAME=your-cdp-key-name
CDP_API_KEY_PRIVATE_KEY=your-cdp-private-key
OPENAI_API_KEY=your-openai-key
NETWORK_ID=base-sepolia


Note

Make sure to add .env to your .gitignore file to prevent committing sensitive information.

Creating Your First Agent
Let's break down the implementation into several parts from the chatbot.ts example file:

1. Required Imports
First, we need to import all necessary dependencies:

import {
  AgentKit,
  CdpWalletProvider,
  wethActionProvider,
  walletActionProvider,
  erc20ActionProvider,
  cdpApiActionProvider,
  cdpWalletActionProvider,
  pythActionProvider,
} from "@coinbase/agentkit";

import { getLangChainTools } from "@coinbase/agentkit-langchain";
import { HumanMessage } from "@langchain/core/messages";
import { MemorySaver } from "@langchain/langgraph";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { ChatOpenAI } from "@langchain/openai";
import * as dotenv from "dotenv";
import * as fs from "fs";
import * as readline from "readline";

dotenv.config();

2. Environment Validation
Add environment variable validation to ensure required variables are set:

/**
 * Validates that required environment variables are set
 *
 * @throws {Error} - If required environment variables are missing
 * @returns {void}
 */
function validateEnvironment(): void {
  const missingVars: string[] = [];

  // Check required variables
  const requiredVars = ["OPENAI_API_KEY", "CDP_API_KEY_NAME", "CDP_API_KEY_PRIVATE_KEY"];
  requiredVars.forEach(varName => {
    if (!process.env[varName]) {
      missingVars.push(varName);
    }
  });

  // Exit if any required variables are missing
  if (missingVars.length > 0) {
    console.error("Error: Required environment variables are not set");
    missingVars.forEach(varName => {
      console.error(`${varName}=your_${varName.toLowerCase()}_here`);
    });
    process.exit(1);
  }

  // Warn about optional NETWORK_ID
  if (!process.env.NETWORK_ID) {
    console.warn("Warning: NETWORK_ID not set, defaulting to base-sepolia testnet");
  }
}

// Add this right after imports and before any other code
validateEnvironment();

// Configure a file to persist the agent's CDP MPC Wallet Data
const WALLET_DATA_FILE = "wallet_data.txt";

3. Agent Initialization
The initializeAgent function sets up our agent with all necessary components:

/**
 * Initialize the agent with CDP Agentkit
 *
 * @returns Agent executor and config
 */
async function initializeAgent() {
  try {
    // Initialize LLM
    const llm = new ChatOpenAI({
      model: "gpt-4o-mini",
    });

    let walletDataStr: string | null = null;

    // Read existing wallet data if available
    if (fs.existsSync(WALLET_DATA_FILE)) {
      try {
        walletDataStr = fs.readFileSync(WALLET_DATA_FILE, "utf8");
      } catch (error) {
        console.error("Error reading wallet data:", error);
        // Continue without wallet data
      }
    }

    // Configure CDP Wallet Provider
    const config = {
      apiKeyName: process.env.CDP_API_KEY_NAME,
      apiKeyPrivateKey: process.env.CDP_API_KEY_PRIVATE_KEY?.replace(/\\n/g, "\n"),
      cdpWalletData: walletDataStr || undefined,
      networkId: process.env.NETWORK_ID || "base-sepolia",
    };

    const walletProvider = await CdpWalletProvider.configureWithWallet(config);

    // Initialize AgentKit
    const agentkit = await AgentKit.from({
      walletProvider,
      actionProviders: [
        wethActionProvider(),
        pythActionProvider(),
        walletActionProvider(),
        erc20ActionProvider(),
        cdpApiActionProvider({
          apiKeyName: process.env.CDP_API_KEY_NAME,
          apiKeyPrivateKey: process.env.CDP_API_KEY_PRIVATE_KEY?.replace(/\\n/g, "\n"),
        }),
        cdpWalletActionProvider({
          apiKeyName: process.env.CDP_API_KEY_NAME,
          apiKeyPrivateKey: process.env.CDP_API_KEY_PRIVATE_KEY?.replace(/\\n/g, "\n"),
        }),
      ],
    });

    const tools = await getLangChainTools(agentkit);

    // Store buffered conversation history in memory
    const memory = new MemorySaver();
    const agentConfig = { configurable: { thread_id: "CDP AgentKit Chatbot Example!" } };

    // Create React Agent using the LLM and CDP AgentKit tools
    const agent = createReactAgent({
      llm,
      tools,
      checkpointSaver: memory,
      messageModifier: `
        You are a helpful agent that can interact onchain using the Coinbase Developer Platform AgentKit. You are 
        empowered to interact onchain using your tools. If you ever need funds, you can request them from the 
        faucet if you are on network ID 'base-sepolia'. If not, you can provide your wallet details and request 
        funds from the user. Before executing your first action, get the wallet details to see what network 
        you're on. If there is a 5XX (internal) HTTP error code, ask the user to try again later. If someone 
        asks you to do something you can't do with your currently available tools, you must say so, and 
        encourage them to implement it themselves using the CDP SDK + Agentkit, recommend they go to 
        docs.cdp.coinbase.com for more information. Be concise and helpful with your responses. Refrain from 
        restating your tools' descriptions unless it is explicitly requested.
        `,
    });

    // Save wallet data
    const exportedWallet = await walletProvider.exportWallet();
    fs.writeFileSync(WALLET_DATA_FILE, JSON.stringify(exportedWallet));

    return { agent, config: agentConfig };
  } catch (error) {
    console.error("Failed to initialize agent:", error);
    throw error; // Re-throw to be handled by caller
  }
}

4. Agent Interaction Modes
The following code provides two ways to interact with the agent: chat mode and autonomous mode. You can modify or extend these based on your needs:

/**
 * Run the agent autonomously with specified intervals
 */
async function runAutonomousMode(agent: any, config: any, interval = 10) {
  console.log("Starting autonomous mode...");

  while (true) {
    try {
      const thought =
        "Be creative and do something interesting on the blockchain. " +
        "Choose an action or set of actions and execute it that highlights your abilities.";

      const stream = await agent.stream({ messages: [new HumanMessage(thought)] }, config);

      for await (const chunk of stream) {
        if ("agent" in chunk) {
          console.log(chunk.agent.messages[0].content);
        } else if ("tools" in chunk) {
          console.log(chunk.tools.messages[0].content);
        }
        console.log("-------------------");
      }

      await new Promise(resolve => setTimeout(resolve, interval * 1000));
    } catch (error) {
      if (error instanceof Error) {
        console.error("Error:", error.message);
      }
      process.exit(1);
    }
  }
}

/**
 * Run the agent interactively based on user input
 */
async function runChatMode(agent: any, config: any) {
  console.log("Starting chat mode... Type 'exit' to end.");

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const question = (prompt: string): Promise<string> =>
    new Promise(resolve => rl.question(prompt, resolve));

  try {
    while (true) {
      const userInput = await question("\nPrompt: ");

      if (userInput.toLowerCase() === "exit") {
        break;
      }

      const stream = await agent.stream({ messages: [new HumanMessage(userInput)] }, config);

      for await (const chunk of stream) {
        if ("agent" in chunk) {
          console.log(chunk.agent.messages[0].content);
        } else if ("tools" in chunk) {
          console.log(chunk.tools.messages[0].content);
        }
        console.log("-------------------");
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error("Error:", error.message);
    }
    process.exit(1);
  } finally {
    rl.close();
  }
}

/**
 * Choose whether to run in autonomous or chat mode
 */
async function chooseMode(): Promise<"chat" | "auto"> {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const question = (prompt: string): Promise<string> =>
    new Promise(resolve => rl.question(prompt, resolve));

  while (true) {
    console.log("\nAvailable modes:");
    console.log("1. chat    - Interactive chat mode");
    console.log("2. auto    - Autonomous action mode");

    const choice = (await question("\nChoose a mode (enter number or name): "))
      .toLowerCase()
      .trim();

    if (choice === "1" || choice === "chat") {
      rl.close();
      return "chat";
    } else if (choice === "2" || choice === "auto") {
      rl.close();
      return "auto";
    }
    console.log("Invalid choice. Please try again.");
  }
}

/**
 * Main entry point
 */
async function main() {
  try {
    const { agent, config } = await initializeAgent();
    const mode = await chooseMode();

    if (mode === "chat") {
      await runChatMode(agent, config);
    } else {
      await runAutonomousMode(agent, config);
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error("Error:", error.message);
    }
    process.exit(1);
  }
}

// Start the agent when running directly
if (require.main === module) {
  console.log("Starting Agent...");
  main().catch(error => {
    console.error("Fatal error:", error);
    process.exit(1);
  });
}

This implementation provides a flexible foundation that you can customize based on your needs. The agent can:

Run in interactive chat mode where users can directly communicate with it
Run in autonomous mode where it performs actions at regular intervals
Be extended with additional action providers for more functionality
Use CDP's MPC Wallet Provider for secure key management
Be integrated with any LLM supported by LangChain
Adding Agent Functionality
Extend your agent with chat capabilities. To add more functionality, see the Add Agent Capabilities guide.

Testing Your Agent
Try these example interactions:

You: What is your wallet address?
You: transfer .001 ETH to 0x4c8bbcfc6DaE447228FcbB220C1DD4cae623EaaF
You: Register a basename for yourself that represents your identity


and here you have the langchain documentation  abour tools actions and more

@https://js.langchain.com/docs/introduction 

@https://js.langchain.com/docs/tutorials/chatbot/ 

@https://js.langchain.com/docs/how_to/tool_calling/ 

this im not sure but for consulting

@https://js.langchain.com/docs/how_to/tool_results_pass_to_model/ 


@https://js.langchain.com/docs/how_to/tool_streaming/ 

@https://js.langchain.com/docs/how_to/tools_few_shot/ 

also not sure

@https://js.langchain.com/docs/how_to/tool_choice/ 

@https://js.langchain.com/docs/how_to/tool_calling_parallel/ 

important

@https://js.langchain.com/docs/how_to/custom_tools/ 

@https://js.langchain.com/docs/how_to/tools_builtin/ 

@https://js.langchain.com/docs/how_to/tool_calling/ 

@https://js.langchain.com/docs/how_to/tool_results_pass_to_model/ 

general how to 

@https://js.langchain.com/docs/how_to/ 

and here you have a repo example of the starting from scratch agent kit
@https://github.com/0xOucan/ethglobalagentlilcodeerikvalleoucan 
